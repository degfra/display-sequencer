package com.lab4tech.displaysequencer.service;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.HashMap;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Document.OutputSettings;
import org.jsoup.select.Elements;


public class HtmlParserService {
	
	private Document fileDOMdoc = null;
	
	private Document headerFileDOMdoc = null;
	private Document mainFileDOMdoc = null;
	private Document leftsidebarFileDOMdoc = null;
	private Document rightsidebarFileDOMdoc = null;
	private Document footerFileDOMdoc = null;
	
	private Document styleAttributeFileDOMdoc = null;
	
	private String attributeHTMLCode = null;
	
	// Constants defining specific PATHs for the files generated by the Editors :
	// for the moment, only the Clips and Preview are saved as document in the FileSystem
	private static final String WEBAPP_ROOT_PATH = "D:/eclipse_juno_26_09_12_workspace/springdisplaytemplate/src/main/webapp/";
	private static final String WEBAPP_BaseTemplates_PATH = "D:/eclipse_juno_26_09_12_workspace/springdisplaytemplate/src/main/webapp/resources/baseTemplates/";
	
	private static final String WEBAPP_BaseClips_PATH = "D:/eclipse_juno_26_09_12_workspace/displaysequencer/src/main/webapp/WEB-INF/views/";
	
	private String webappClipsPath = "D:/eclipse_juno_26_09_12_workspace/displaysequencer/src/main/webapp/WEB-INF/views/";

	private static final String WEBAPP_Sequences_PATH = "D:/eclipse_juno_26_09_12_workspace/springdisplaytemplate/src/main/webapp/resources/sequences/";
	private static final String WEBAPP_ScreenDisplays_PATH = "D:/eclipse_juno_26_09_12_workspace/springdisplaytemplate/src/main/webapp/resources/screenDisplays/";
	private static final String WEBAPP_Previews_PATH = "D:/eclipse_juno_26_09_12_workspace/springdisplaytemplate/src/main/webapp/resources/previews/";

	/*
	 * PATHS Getters & Setters
	 */
	public static String getWebappRootPath() {
		return WEBAPP_ROOT_PATH;
	}
	
	public static String getWebappBaseClipsPath() {
		return WEBAPP_BaseClips_PATH;
	}

	public static String getWebappPreviewsPath() {
		return WEBAPP_Previews_PATH;
	}

	public String getWebappClipsPath() {
		return webappClipsPath;
	}

	public void setWebappClipsPath(String clipPath) {
//		StringBuilder viewsPath = new StringBuilder(clipPath); 
//		viewsPath.append("/WEB-INF/views/");
//		viewsPath.append("/");
//		webappClipsPath = viewsPath.toString();
		this.webappClipsPath = clipPath;
		System.out.println("Parser Clip Path : " + webappClipsPath);
	}

	public static String getWebappSequencesPath() {
		return WEBAPP_Sequences_PATH;
	}

	public static String getWebappDisplaysPath() {
		return WEBAPP_ScreenDisplays_PATH;
	}

	
	public String getAttributeHTMLCode() {
		return attributeHTMLCode;
	}

	public void setAttributeHTMLCode(String attributeHTMLCode) {
		this.attributeHTMLCode = attributeHTMLCode;
	}
	

	/*
	 * Constructor without arguments
	 */
	public HtmlParserService() {
		
	}
	
	/*
	 * Constructor : parsing the html file passed as an argument
	 */
	public void parseDisplayDocHtml(String displayDocUri) {
		
		String path = new String();
		
//		if (displayDocUri.substring(0, 3).equals("base")) {
			path = WEBAPP_BaseClips_PATH;
//		}else{
//			path = WEBAPP_Templates_PATH;
//		}
		
		System.out.println("HtmlParserService : " + displayDocUri);
		
		try {			
			File input = new File(path + displayDocUri);
			this.fileDOMdoc = Jsoup.parse(input, "UTF-8");
			
		}catch (Exception ex){
			ex.printStackTrace();
		}		
	}
	
	/*
	 * Parses the HTML code from the template configuration (via CKEditor)
	 * and creates an instance of FileDomDoc (via Jsoup)
	 * for each clip's section HTML code
	 */
	public void parseSectionsHTMLCode(String sectionName, String sectionHtmlCode){
		
		try{
			if(sectionName.equals("header")) {
				this.headerFileDOMdoc = Jsoup.parse(sectionHtmlCode);
					System.out.println("Header Section Parsing : " + sectionHtmlCode);
			}else if(sectionName.equals("main")){
				this.mainFileDOMdoc = Jsoup.parse(sectionHtmlCode);
					System.out.println("Main Section Parsing : " + sectionHtmlCode);
			}else if(sectionName.equals("leftsidebar")){
				this.leftsidebarFileDOMdoc = Jsoup.parse(sectionHtmlCode);
					System.out.println("Left Sidebar Section Parsing : " + sectionHtmlCode);
			}else if(sectionName.equals("rightsidebar")){
				this.rightsidebarFileDOMdoc = Jsoup.parse(sectionHtmlCode);
					System.out.println("Right Sidebar Section Parsing : " + sectionHtmlCode);
			}else if(sectionName.equals("footer")){
				this.footerFileDOMdoc = Jsoup.parse(sectionHtmlCode);
					System.out.println("Footer Section Parsing : " + sectionHtmlCode);
			}
			
		}catch (Exception ex){
			ex.printStackTrace();
		}
		
	}
	
	public void parseAttributeHTMLCode(String styleName, String attributeHTMLCode) {
		
		try{
			if(styleName.equals("style")) {
				this.styleAttributeFileDOMdoc = Jsoup.parse(attributeHTMLCode);
					System.out.println("Style BackgroundColor Parsing : " + attributeHTMLCode);
			}
		}catch (Exception ex){
			ex.printStackTrace();
		}
		
	}
	
	/*
	 * Replaces the inner html of the Clip's Sections
	 * with the html code entered vis the CKEditor
	 * while configuring the template (i.e. baseSidebars_1920_template.jsp)
	 */
	public String updateClipSectionsHTMLCode() {
		
		Elements divElements = fileDOMdoc.getElementsByTag("div");
		int divElementTagsCount = divElements.size();
		
		for(int i = 0 ; i < divElementTagsCount ; i++) {
			Element divElement = divElements.get(i);
			Attributes divAttributes = divElement.attributes();
			

			String divStyle = this.attributeHTMLCode;
			divAttributes.put("style", divStyle);
			
				System.out.println("updateClipSectionsHTMLCode() Style BackgroundColor : " + divStyle );
			
			String divId = divAttributes.get("id");
			
			if(divId.equals("header")) {
				String headerHTMLCode = this.headerFileDOMdoc.html();
				divElement.html(headerHTMLCode);
				
				System.out.println("updateClipSectionsHTMLCode() header : " + headerHTMLCode);
				
			}else if(divId.equals("leftsidebar")) {
				String leftsidebarHTMLCode = this.leftsidebarFileDOMdoc.html();
				divElement.html(leftsidebarHTMLCode);
				
				System.out.println("updateClipSectionsHTMLCode() leftsidebar : " + leftsidebarHTMLCode);
				
			}else if(divId.equals("rightsidebar")) {
				String rightsidebarHTMLCode = this.rightsidebarFileDOMdoc.html();
				divElement.html(rightsidebarHTMLCode);
				
				System.out.println("updateClipSectionsHTMLCode() leftsidebar : " + rightsidebarHTMLCode);
				
			}else if(divId.equals("main")) {
				String mainHTMLCode = this.mainFileDOMdoc.html();
				divElement.html(mainHTMLCode);
				
				System.out.println("updateClipSectionsHTMLCode() leftsidebar : " + mainHTMLCode);
				
			}else if(divId.equals("footer")) {
				String footerHTMLCode = this.footerFileDOMdoc.html();
				divElement.html(footerHTMLCode);
				
				System.out.println("updateClipSectionsHTMLCode() leftsidebar : " + footerHTMLCode);
				
			}
			
		}
		
		String JSPDocOutPutCode = generateHtmlOutput();
		String JSPCleanOutPut = convertHtmlToJSPOutput(JSPDocOutPutCode);
		
		return JSPCleanOutPut;

	}
	
	/*
	 * Generates the Html Output code (String) from the Document DOM Object parsed by the HTMLParserService :
	 * puts the JSP code and Html main tags in the right order
	 */
	public String generateHtmlOutput(){
		
		OutputSettings settings = fileDOMdoc.outputSettings();
		settings.charset("UTF-8");
		String htmlOutput = fileDOMdoc.html();
		
		String htmlOutputCode = htmlOutput.toString();
		    System.out.println("HTMLPARSER OUTPUT BEGINING : " + htmlOutputCode + " HTMLPARSER OUTPUT END" );
		
		int jspBegin = htmlOutputCode.indexOf("&lt;%@ page language");
		int jspEndHeadBegin = htmlOutputCode.indexOf("<meta");
		String jspMain = htmlOutputCode.substring(jspBegin, jspEndHeadBegin);
		    System.out.println("JSP MAIN : " + jspMain);
		
		StringBuilder htmlCorrectOutput = new StringBuilder(jspMain);
		htmlCorrectOutput.append("<!DOCTYPE html PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'><html><head>");
				
		int headEndBodyBegin = htmlOutputCode.indexOf("<form");
		String headHtml = htmlOutputCode.substring(jspEndHeadBegin, headEndBodyBegin);
			System.out.println("HEAD HTML : " + headHtml);
		
		htmlCorrectOutput.append(headHtml);
		htmlCorrectOutput.append("</head><body scroll='no' style='overflow: hidden' leftmargin='0' topmargin='0' rightmargin='0' bottommargin='0' marginwidth='0' marginheight='0'>");
		
		htmlCorrectOutput.append("<form:form name='clipForm' method='post' modelAttribute='clip' action='nextClip' >");
			
		int formEnd = htmlOutputCode.indexOf("<div class");
		int footerEnd = htmlOutputCode.indexOf("<form:label");
		String bodyHtml = htmlOutputCode.substring(formEnd, footerEnd);
		
		htmlCorrectOutput.append(bodyHtml);
		
		int containerEnd = htmlOutputCode.indexOf("<!---->");
		int bodyEnd = htmlOutputCode.indexOf("</body>");
		String bodyEndHtml = htmlOutputCode.substring(containerEnd + 7, bodyEnd);
			
		htmlCorrectOutput.append(bodyEndHtml);
		htmlCorrectOutput.append("</body></html>");
		
		String htmlCorrectOutputCode = htmlCorrectOutput.toString();
		String JSPOutputCode = convertHtmlToJSPOutput(htmlCorrectOutputCode);
		
		    System.out.println("HTMLPARSER OUTPUT BEGINING : " + JSPOutputCode + " HTMLPARSER OUTPUT END" );
		System.out.println(JSPOutputCode);
		
		return JSPOutputCode;
		
	}
	
	/*
	 * Helper method converting escape characters into the proper Html tag characters
	 */
	public String convertHtmlToJSPOutput(String parserHtmlOutput) {
		
		String jspCleanOutput = parserHtmlOutput.replaceAll("&lt;", "<");
		jspCleanOutput = jspCleanOutput.replaceAll("&gt;", ">");
		jspCleanOutput = jspCleanOutput.replaceAll("&apos;", "\'");
		jspCleanOutput = jspCleanOutput.replaceAll("&quot;", "\"");
		jspCleanOutput = jspCleanOutput.replaceAll("&amp;", "&");
		
		return jspCleanOutput;
		
	}

}

